// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: api/portal-administrativo.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortalCadastroClient is the client API for PortalCadastro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalCadastroClient interface {
	NovoUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error)
	EditaUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error)
	RemoveUsuario(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Status, error)
	ObtemUsuario(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Usuario, error)
	ObtemTodosUsuarios(ctx context.Context, in *Vazia, opts ...grpc.CallOption) (PortalCadastro_ObtemTodosUsuariosClient, error)
	NovoLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*Status, error)
	EditaLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*Status, error)
	RemoveLivro(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Status, error)
	ObtemLivro(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Livro, error)
	ObtemTodosLivros(ctx context.Context, in *Vazia, opts ...grpc.CallOption) (PortalCadastro_ObtemTodosLivrosClient, error)
}

type portalCadastroClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalCadastroClient(cc grpc.ClientConnInterface) PortalCadastroClient {
	return &portalCadastroClient{cc}
}

func (c *portalCadastroClient) NovoUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/NovoUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) EditaUsuario(ctx context.Context, in *Usuario, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/EditaUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) RemoveUsuario(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/RemoveUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) ObtemUsuario(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Usuario, error) {
	out := new(Usuario)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/ObtemUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) ObtemTodosUsuarios(ctx context.Context, in *Vazia, opts ...grpc.CallOption) (PortalCadastro_ObtemTodosUsuariosClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortalCadastro_ServiceDesc.Streams[0], "/cadastro.PortalCadastro/ObtemTodosUsuarios", opts...)
	if err != nil {
		return nil, err
	}
	x := &portalCadastroObtemTodosUsuariosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortalCadastro_ObtemTodosUsuariosClient interface {
	Recv() (*Usuario, error)
	grpc.ClientStream
}

type portalCadastroObtemTodosUsuariosClient struct {
	grpc.ClientStream
}

func (x *portalCadastroObtemTodosUsuariosClient) Recv() (*Usuario, error) {
	m := new(Usuario)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portalCadastroClient) NovoLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/NovoLivro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) EditaLivro(ctx context.Context, in *Livro, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/EditaLivro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) RemoveLivro(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/RemoveLivro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) ObtemLivro(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Livro, error) {
	out := new(Livro)
	err := c.cc.Invoke(ctx, "/cadastro.PortalCadastro/ObtemLivro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalCadastroClient) ObtemTodosLivros(ctx context.Context, in *Vazia, opts ...grpc.CallOption) (PortalCadastro_ObtemTodosLivrosClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortalCadastro_ServiceDesc.Streams[1], "/cadastro.PortalCadastro/ObtemTodosLivros", opts...)
	if err != nil {
		return nil, err
	}
	x := &portalCadastroObtemTodosLivrosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortalCadastro_ObtemTodosLivrosClient interface {
	Recv() (*Livro, error)
	grpc.ClientStream
}

type portalCadastroObtemTodosLivrosClient struct {
	grpc.ClientStream
}

func (x *portalCadastroObtemTodosLivrosClient) Recv() (*Livro, error) {
	m := new(Livro)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortalCadastroServer is the server API for PortalCadastro service.
// All implementations must embed UnimplementedPortalCadastroServer
// for forward compatibility
type PortalCadastroServer interface {
	NovoUsuario(context.Context, *Usuario) (*Status, error)
	EditaUsuario(context.Context, *Usuario) (*Status, error)
	RemoveUsuario(context.Context, *Identificador) (*Status, error)
	ObtemUsuario(context.Context, *Identificador) (*Usuario, error)
	ObtemTodosUsuarios(*Vazia, PortalCadastro_ObtemTodosUsuariosServer) error
	NovoLivro(context.Context, *Livro) (*Status, error)
	EditaLivro(context.Context, *Livro) (*Status, error)
	RemoveLivro(context.Context, *Identificador) (*Status, error)
	ObtemLivro(context.Context, *Identificador) (*Livro, error)
	ObtemTodosLivros(*Vazia, PortalCadastro_ObtemTodosLivrosServer) error
	mustEmbedUnimplementedPortalCadastroServer()
}

// UnimplementedPortalCadastroServer must be embedded to have forward compatible implementations.
type UnimplementedPortalCadastroServer struct {
}

func (UnimplementedPortalCadastroServer) NovoUsuario(context.Context, *Usuario) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NovoUsuario not implemented")
}
func (UnimplementedPortalCadastroServer) EditaUsuario(context.Context, *Usuario) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditaUsuario not implemented")
}
func (UnimplementedPortalCadastroServer) RemoveUsuario(context.Context, *Identificador) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsuario not implemented")
}
func (UnimplementedPortalCadastroServer) ObtemUsuario(context.Context, *Identificador) (*Usuario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtemUsuario not implemented")
}
func (UnimplementedPortalCadastroServer) ObtemTodosUsuarios(*Vazia, PortalCadastro_ObtemTodosUsuariosServer) error {
	return status.Errorf(codes.Unimplemented, "method ObtemTodosUsuarios not implemented")
}
func (UnimplementedPortalCadastroServer) NovoLivro(context.Context, *Livro) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NovoLivro not implemented")
}
func (UnimplementedPortalCadastroServer) EditaLivro(context.Context, *Livro) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditaLivro not implemented")
}
func (UnimplementedPortalCadastroServer) RemoveLivro(context.Context, *Identificador) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLivro not implemented")
}
func (UnimplementedPortalCadastroServer) ObtemLivro(context.Context, *Identificador) (*Livro, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtemLivro not implemented")
}
func (UnimplementedPortalCadastroServer) ObtemTodosLivros(*Vazia, PortalCadastro_ObtemTodosLivrosServer) error {
	return status.Errorf(codes.Unimplemented, "method ObtemTodosLivros not implemented")
}
func (UnimplementedPortalCadastroServer) mustEmbedUnimplementedPortalCadastroServer() {}

// UnsafePortalCadastroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalCadastroServer will
// result in compilation errors.
type UnsafePortalCadastroServer interface {
	mustEmbedUnimplementedPortalCadastroServer()
}

func RegisterPortalCadastroServer(s grpc.ServiceRegistrar, srv PortalCadastroServer) {
	s.RegisterService(&PortalCadastro_ServiceDesc, srv)
}

func _PortalCadastro_NovoUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Usuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).NovoUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/NovoUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).NovoUsuario(ctx, req.(*Usuario))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_EditaUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Usuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).EditaUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/EditaUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).EditaUsuario(ctx, req.(*Usuario))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_RemoveUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).RemoveUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/RemoveUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).RemoveUsuario(ctx, req.(*Identificador))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_ObtemUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).ObtemUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/ObtemUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).ObtemUsuario(ctx, req.(*Identificador))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_ObtemTodosUsuarios_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Vazia)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortalCadastroServer).ObtemTodosUsuarios(m, &portalCadastroObtemTodosUsuariosServer{stream})
}

type PortalCadastro_ObtemTodosUsuariosServer interface {
	Send(*Usuario) error
	grpc.ServerStream
}

type portalCadastroObtemTodosUsuariosServer struct {
	grpc.ServerStream
}

func (x *portalCadastroObtemTodosUsuariosServer) Send(m *Usuario) error {
	return x.ServerStream.SendMsg(m)
}

func _PortalCadastro_NovoLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Livro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).NovoLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/NovoLivro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).NovoLivro(ctx, req.(*Livro))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_EditaLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Livro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).EditaLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/EditaLivro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).EditaLivro(ctx, req.(*Livro))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_RemoveLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).RemoveLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/RemoveLivro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).RemoveLivro(ctx, req.(*Identificador))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_ObtemLivro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalCadastroServer).ObtemLivro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cadastro.PortalCadastro/ObtemLivro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalCadastroServer).ObtemLivro(ctx, req.(*Identificador))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalCadastro_ObtemTodosLivros_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Vazia)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortalCadastroServer).ObtemTodosLivros(m, &portalCadastroObtemTodosLivrosServer{stream})
}

type PortalCadastro_ObtemTodosLivrosServer interface {
	Send(*Livro) error
	grpc.ServerStream
}

type portalCadastroObtemTodosLivrosServer struct {
	grpc.ServerStream
}

func (x *portalCadastroObtemTodosLivrosServer) Send(m *Livro) error {
	return x.ServerStream.SendMsg(m)
}

// PortalCadastro_ServiceDesc is the grpc.ServiceDesc for PortalCadastro service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalCadastro_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cadastro.PortalCadastro",
	HandlerType: (*PortalCadastroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NovoUsuario",
			Handler:    _PortalCadastro_NovoUsuario_Handler,
		},
		{
			MethodName: "EditaUsuario",
			Handler:    _PortalCadastro_EditaUsuario_Handler,
		},
		{
			MethodName: "RemoveUsuario",
			Handler:    _PortalCadastro_RemoveUsuario_Handler,
		},
		{
			MethodName: "ObtemUsuario",
			Handler:    _PortalCadastro_ObtemUsuario_Handler,
		},
		{
			MethodName: "NovoLivro",
			Handler:    _PortalCadastro_NovoLivro_Handler,
		},
		{
			MethodName: "EditaLivro",
			Handler:    _PortalCadastro_EditaLivro_Handler,
		},
		{
			MethodName: "RemoveLivro",
			Handler:    _PortalCadastro_RemoveLivro_Handler,
		},
		{
			MethodName: "ObtemLivro",
			Handler:    _PortalCadastro_ObtemLivro_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObtemTodosUsuarios",
			Handler:       _PortalCadastro_ObtemTodosUsuarios_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObtemTodosLivros",
			Handler:       _PortalCadastro_ObtemTodosLivros_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/portal-administrativo.proto",
}
